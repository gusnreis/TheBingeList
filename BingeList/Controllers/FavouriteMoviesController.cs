using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using System.Xml.Linq;
using BingeList.Helpers;
using BingeList.Models;
using Microsoft.AspNet.Identity;
using TMDbLib.Client;
using TMDbLib.Objects.Movies;

namespace BingeList.Controllers
{
    public class FavouriteMoviesController : Controller
    {
        private BingeListDBContext db = new BingeListDBContext();

        // GET: FavouriteMovies
        public ActionResult Index()
        {
            string currentUserId = User.Identity.GetUserId();
            var currentUserFavourites = db.FavouriteMovies.Where(x => x.UserId == currentUserId).ToList();
            List<Movie> favouriteMovies = new List<Movie>();
            foreach (var movie in currentUserFavourites)
            {
                Object obj = MovieDatabase.ObjectToXML(movie.MovieInfo.ToString(), typeof(Movie));
                favouriteMovies.Add((Movie)obj);
            }

            ViewBag.Results = favouriteMovies;
            return View();
        }

        [HttpPost]
        [Authorize]
        public ActionResult _Fav(string ID)
        {
            List<string> errors = new List<string>(); // You might want to return an error if something wrong happened

            FavouriteMovie favMovieData = new FavouriteMovie();
            favMovieData.MovieId = ID;
            favMovieData.UserId = User.Identity.GetUserId();

            try
            {
                int movieID = int.Parse(ID);

                TMDbClient client = new TMDbClient("a331c3f9e48b75412c7c99a04a4aba78");
                client = MovieDatabase.FetchConfig(client);
                Movie movie = client.GetMovieAsync(movieID, MovieMethods.Videos).Result;
                string xmlMovieInfo = MovieDatabase.GetXMLFromObject(movie);
                var xmlData = XElement.Parse(xmlMovieInfo);
                favMovieData.MovieInfo = xmlData;
            }
            catch (Exception ex)
            {
                errors.Add(ex.ToString());
            }

            db.FavouriteMovies.Add(favMovieData);
            db.SaveChanges();

            return Json(errors, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [Authorize]
        public ActionResult _UnFav(string ID)
        {
            List<string> errors = new List<string>(); // You might want to return an error if something wrong happened

            try
            {
                string userId = User.Identity.GetUserId();
                FavouriteMovie FavouriteMovie = db.FavouriteMovies.Where(x => x.UserId == userId && x.MovieId == ID).FirstOrDefault();
                db.FavouriteMovies.Remove(FavouriteMovie);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                errors.Add(ex.ToString());
            }

            return Json(errors, JsonRequestBehavior.AllowGet);
        }


        #region Methods generated by MVC5 Scaffolding

        // GET: FavouriteMovies/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            FavouriteMovie FavouriteMovie = db.FavouriteMovies.Find(id);
            if (FavouriteMovie == null)
            {
                return HttpNotFound();
            }
            return View(FavouriteMovie);
        }

        // GET: FavouriteMovies/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: FavouriteMovies/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "ID,UserId,MovieId,movieInfo,UserHasWatched")] FavouriteMovie FavouriteMovie)
        {
            if (ModelState.IsValid)
            {
                db.FavouriteMovies.Add(FavouriteMovie);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(FavouriteMovie);
        }

        // GET: FavouriteMovies/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            FavouriteMovie FavouriteMovie = db.FavouriteMovies.Find(id);
            if (FavouriteMovie == null)
            {
                return HttpNotFound();
            }
            return View(FavouriteMovie);
        }

        // POST: FavouriteMovies/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "ID,UserId,MovieId,movieInfo,UserHasWatched")] FavouriteMovie FavouriteMovie)
        {
            if (ModelState.IsValid)
            {
                db.Entry(FavouriteMovie).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(FavouriteMovie);
        }

        // GET: FavouriteMovies/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            FavouriteMovie FavouriteMovie = db.FavouriteMovies.Find(id);
            if (FavouriteMovie == null)
            {
                return HttpNotFound();
            }
            return View(FavouriteMovie);
        }

        // POST: FavouriteMovies/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            FavouriteMovie FavouriteMovie = db.FavouriteMovies.Find(id);
            db.FavouriteMovies.Remove(FavouriteMovie);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        #endregion
    }
}
